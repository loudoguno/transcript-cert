"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@0xcert/utils");
const spec_1 = require("@hayspec/spec");
const __1 = require("../../..");
const spec = new spec_1.Spec();
spec.before((ctx) => __awaiter(this, void 0, void 0, function* () {
    ctx.set('merkle', new __1.Merkle({ hasher: (v) => utils_1.sha(256, v) }));
}));
spec.test('exposes 0 from empty array', (ctx) => __awaiter(this, void 0, void 0, function* () {
    const values = [];
    const expose = [];
    const recipe = yield ctx.get('merkle').notarize(values);
    const evidence = yield ctx.get('merkle').disclose(recipe, expose);
    ctx.deepEqual(evidence, {
        values: [],
        nodes: [
            { index: 0, hash: 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855' },
        ],
    });
}));
spec.test('exposes 0 from A, B, C, D', (ctx) => __awaiter(this, void 0, void 0, function* () {
    const values = ['A', 'B', 'C', 'D'];
    const expose = [];
    const recipe = yield ctx.get('merkle').notarize(values);
    const evidence = yield ctx.get('merkle').disclose(recipe, expose);
    ctx.deepEqual(evidence, {
        values: [],
        nodes: [
            { index: 0, hash: '0bcec31a258c3f9aa814efe53d638648df413a1fe35470b5be5341a2a9fd30a9' },
        ],
    });
}));
spec.test('exposes 5 from A, B, C, D', (ctx) => __awaiter(this, void 0, void 0, function* () {
    const values = ['A', 'B', 'C', 'D'];
    const expose = [0, 2];
    const recipe = yield ctx.get('merkle').notarize(values);
    const evidence = yield ctx.get('merkle').disclose(recipe, expose);
    ctx.deepEqual(evidence, {
        values: [
            { index: 0, value: 'A' },
            { index: 2, value: 'C' },
        ],
        nodes: [
            { index: 3, hash: 'df7e70e5021544f4834bbee64a9e3789febc4be81470df629cad6ddb03320a5c' },
            { index: 6, hash: 'dbf687a59392a9b4a1c1fe1527b776a85b971c583ea22a88e41cebf91215930c' },
        ],
    });
}));
exports.default = spec;
//# sourceMappingURL=disclose-instance-method.test.js.map