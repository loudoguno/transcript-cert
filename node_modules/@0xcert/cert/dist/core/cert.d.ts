import { Merkle, MerkleHasher } from '@0xcert/merkle';
import { PropPath, PropProof } from './prop';
export interface CertConfig {
    schema: any;
    hasher?: MerkleHasher;
}
export declare class Cert {
    protected schema: any;
    protected merkle: Merkle;
    static getInstance(config: CertConfig): Cert;
    constructor(config: CertConfig);
    notarize(data: any): Promise<PropProof[]>;
    disclose(data: any, paths: PropPath[]): Promise<PropProof[]>;
    calculate(data: any, proofs: PropProof[]): Promise<string>;
    imprint(data: any): Promise<string>;
    protected buildSchemaProps(data: any, schema?: any, prepend?: any[]): any;
    protected buildCompoundProps(props: any): Promise<any>;
    protected buildProofs(props: any, paths?: any): Promise<any>;
    protected checkDataInclusion(data: any, proofs: PropProof[]): boolean;
    protected imprintProofs(proofs: PropProof[]): Promise<string>;
    protected getPathIndexes(keys: PropPath): number[];
    protected getEmptyImprint(): Promise<any>;
    protected buildPropGroups(props: any): any;
}
