export declare type MerkleHasher = ((v: any) => string) | ((v: any) => Promise<string>);
export interface MerkleValue {
    index: number;
    value: any;
}
export interface MerkleHash {
    index: number;
    hash: string;
}
export interface MerkleRecipe {
    values: MerkleValue[];
    nodes: MerkleHash[];
}
export interface MerkleOptions {
    hasher?: MerkleHasher;
}
export declare class Merkle {
    protected $options: MerkleOptions;
    constructor(options?: MerkleOptions);
    notarize(data: (string | number | boolean)[]): Promise<{
        values: {
            index: number;
            value: string | number | boolean;
        }[];
        nodes: {
            index: number;
            hash: string;
        }[];
    }>;
    disclose(recipe: MerkleRecipe, expose: number[]): Promise<{
        values: any[];
        nodes: MerkleHash[];
    }>;
    imprint(evidence: MerkleRecipe): Promise<string>;
}
